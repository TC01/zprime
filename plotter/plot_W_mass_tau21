#!/usr/bin/env python

import array
import optparse		# For cmslpc/cmssw compatibility...
import os
import shutil

import ROOT

treeName = 'tree'

def makePlot(xvar, yvar, chain, jet, xbins, ybins, useWeights=False):
	newX = jet + xvar
	newY = jet + yvar
	selection = newX + '> 50 &&' + newX + " < 120 && lep2Ddr >= 0.5 && " + jet + "pt > 100"
	print selection
	
	plot = ROOT.TH2F(jet + 'plot', 'plot', xbins[0], xbins[1], xbins[2], ybins[0], ybins[1], ybins[2])


	if not useWeights:
		chain.Draw(newY + ":" + newX + ">>" + jet + "plot", selection, "goff")
	else:
		# This is a bad hack.
		weight = array.array('f', [1.0])
		mass = array.array('f', [-1.0])
		tau21 = array.array('f', [1.0])
		pt = array.array('f', [-1.0])
		lep2Ddr = array.array('f', [-1.0])

		chain.SetBranchAddress('weight', weight)
		chain.SetBranchAddress('lep2Ddr', lep2Ddr)
		chain.SetBranchAddress(jet + 'pt', pt)
		chain.SetBranchAddress(newX, mass)
		chain.SetBranchAddress(newY, tau21)

		for i in xrange(chain.GetEntries()):
			chain.GetEntry(i)
			if lep2Ddr[0] >= 0.5 and pt[0] > 100 and mass[0] > 50 and mass[0] < 120:
				plot.Fill(mass[0], tau21[0], weight[0])
		chain.ResetBranchAddresses()


	return plot

def do2DPlot(filename, outputName, xvar, yvar, xbins=[75, 0, 150], ybins=[10, 0, 1], wait=False, useWeights=False):
	chain = ROOT.TChain(treeName)
	chain.Add(filename)

	plot = makePlot(xvar, yvar, chain, 'jet1', xbins, ybins, useWeights)
	plot2 = makePlot(xvar, yvar, chain, 'jet2', xbins, ybins, useWeights)
	plot3 = makePlot(xvar, yvar, chain, 'jet3', xbins, ybins, useWeights)

	plot.Add(plot2)
	plot.Add(plot3)

	plot.SetStats(0)
	plot.SetTitle("QCD Monte Carlo: Merged W mass, tau21, lep2Ddr > 0.5, pt > 100")
	name = filename.split('/')[-1]
	name = 'canvas_' + name.split('.')[0]
	canvas = ROOT.TCanvas(name, name, 1000, 800)
	canvas.cd()
	plot.Draw('COLZ')
	plot.GetYaxis().SetTitle(yvar)
	plot.GetXaxis().SetTitle(xvar)
	profile = plot.ProfileX('plot_profile')
	profile.Draw('same')
	canvas.SaveAs(outputName)
	canvas.SaveAs(outputName + '.png')
	if wait:
		raw_input()

def directoryPlot(dir, xvar, yvar, useWeights=False):
	try:
		shutil.rmtree(os.path.join(dir, 'plots'))
	except:
		pass
	os.mkdir(os.path.join(dir, 'plots'))

	for path, directory, files in os.walk(dir):
		for file in files:
			if '.root' in file and ('WJets' in file):
				filename = os.path.join(path, file)
				plotname = file.split('.')[0] + '.pdf'
				plotname = os.path.join(dir, 'plots', plotname)
				do2DPlot(filename, plotname, xvar, yvar, useWeights=useWeights)

def main():
	parser = optparse.OptionParser()
	parser.add_option('-x', '--xvar', dest='xvar', help="The x-axis variable.", default='mass')
	parser.add_option('-y', '--yvar', dest='yvar', help="The y-axis variable.", default='tau21')
	parser.add_option('-w', '--weights', action='store_true', dest='weights', help="The Tree has weights.")
	(opts, args) = parser.parse_args()
	for arg in args:
		if os.path.exists(os.path.abspath(arg)):
			directoryPlot(os.path.abspath(arg), opts.xvar, opts.yvar, useWeights=opts.weights)

if __name__ == '__main__':
	main()
