#!/usr/bin/env python

import array
import optparse		# For cmslpc/cmssw compatibility...
import os
import shutil

import ROOT

treeName = 'tree'

shouldPlot = ['QCD_TuneZ2star', 'Jets']

lumi = 19748.

def shouldPlotFile(filename):
	valid = False
	for possible in shouldPlot:
		if possible in filename:
			valid = True
	return valid

def makePlot(xvar, yvar, chain, offset, xbins, ybins, weight=1, useWeights=False):
	newX = xvar
	newY = yvar
	selection = newX + '> 50 &&' + newX + " < 120 && (lep2Drel>25.||lep2Ddr>0.5) && hadWcandpt > 200 && cuts[1]<1&&cuts[2]>0 && leppt > 25 && numjets > 2" # && hadtopcandmass > 250 && leptopcandmass > 140 && leptopcandmass < 250"
	print selection
	
	plot = ROOT.TH2F(offset + 'plot', offset + 'plot', xbins[0], xbins[1], xbins[2], ybins[0], ybins[1], ybins[2])

	chain.Draw(newY + ":" + newX + ">>" + offset + "plot", str(weight) + "* (" + selection + ")", "goff")

#	plot.Scale(lumi)

	return plot

def do2DPlots(filenames, outputNames, xvar, yvar, xbins=[75, 0, 150], ybins=[20, 0, 1.0], wait=False, useWeights=False):

	count = 0
	plots = []
	for filename in filenames:
		chain = ROOT.TChain(treeName)
		chain.Add(filename)

		weight = 1
		if 'W1' in filename:
			weight = 6662.8 / 23141598.
		elif 'W2' in filename:
			weight = 2159.2 / 34044921.
		elif 'W3' in filename:
			weight = 640.4 / 15539503.
		elif 'W4' in filename:
			weight = 264.0 / 13382803.

		plot = makePlot(xvar, yvar, chain, str(count), xbins, ybins, weight=weight)

#		canvasTest = ROOT.TCanvas()
#		canvasTest.cd()
#		plot.Draw('COLZ')
#		raw_input()

		plots.append(plot)
		count += 1

	plot = plots[0]
	for i in xrange(len(plots) - 1):
		plot.Add(plots[i + 1])

	outputName = outputNames[0]
	plot.SetStats(0)
	plot.SetTitle('')
	plot.Scale(lumi)

	name = filename.split('/')[-1]
	name = 'canvas_' + name.split('.')[0]

	canvas = ROOT.TCanvas(name, name, 1000, 800)
	canvas.cd()

	plot.Draw('COLZ')
	plot.GetYaxis().SetTitle('Hadronic W #tau_{2}/^{}#tau_{1}')
	plot.GetXaxis().SetTitle('Hadronic W mass (GeV)')
	profile = plot.ProfileX('plot_profile', 1, -1, 'g')
	profile.Draw('same')

	canvas.SaveAs(outputName + '.pdf')
	canvas.SaveAs(outputName + '.png')
#	if wait:

	raw_input()

def directoryPlot(dir, xvar, yvar, useWeights=False):
	try:
#		shutil.rmtree(os.path.join(dir, 'plots'))
		os.mkdir(os.path.join(dir, 'plots'))
	except:
		pass

	filenames = []
	plotnames = []
	for path, directory, files in os.walk(dir):
		for file in files:
			if '.root' in file and ('W1' in file or 'W2' in file or 'W3' in file or 'W4' in file):
				print "Making plots for file: " + file
				filename = os.path.join(path, file)
				plotname = file.split('.')[0]
#				plotname = os.path.join(dir, 'plots', plotname)

				filenames.append(filename)
				plotnames.append(plotname)

	
	

	do2DPlots(filenames, plotnames, xvar, yvar)

def main():
	parser = optparse.OptionParser()
	parser.add_option('-x', '--xvar', dest='xvar', help="The x-axis variable.", default='hadWcandmass')
	parser.add_option('-y', '--yvar', dest='yvar', help="The y-axis variable.", default='hadWcandtau21')
	parser.add_option('-w', '--weights', action='store_true', dest='weights', help="The Tree has weights.")
	(opts, args) = parser.parse_args()
	for arg in args:
		if os.path.exists(os.path.abspath(arg)):
			directoryPlot(os.path.abspath(arg), opts.xvar, opts.yvar, useWeights=opts.weights)

if __name__ == '__main__':
	main()
